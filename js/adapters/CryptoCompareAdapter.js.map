{"version":3,"sources":["../../src/adapters/CryptoCompareAdapter.js"],"names":["crId","ut","replaceDecCodes","C","SOURCE","_toArticles","json","Array","isArray","Data","map","item","title","body","categories","url","source","source_info","published_on","_author","name","_publishedAt","Date","toISOString","_body","articleId","description","related","author","publishedAt","CryptoCompareAdapter","toNews","option","sortOrder","articles","sortBy"],"mappings":";;;;;;;AAAA;;IAEQA,I,GAA0BC,c,CAA1BD,I;IAAME,e,GAAoBD,c,CAApBC,e;AAEd,IAAMC,CAAC,GAAG;AACRC,EAAAA,MAAM,EAAE;AADA,CAAV;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC1B,MAAI,CAACA,IAAD,IAAS,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,IAAnB,CAAd,EAAwC;AACtC,WAAO,EAAP;AACD;;AACD,SAAOH,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAc,UAAAC,IAAI,EAAI;AAAA,QAEzBC,KAFyB,GAIvBD,IAJuB,CAEzBC,KAFyB;AAAA,QAElBC,IAFkB,GAIvBF,IAJuB,CAElBE,IAFkB;AAAA,QAEZC,UAFY,GAIvBH,IAJuB,CAEZG,UAFY;AAAA,QAGzBC,GAHyB,GAIvBJ,IAJuB,CAGzBI,GAHyB;AAAA,QAGpBC,MAHoB,GAIvBL,IAJuB,CAGpBK,MAHoB;AAAA,4BAIvBL,IAJuB,CAGZM,WAHY;AAAA,QAGZA,WAHY,kCAGA,EAHA;AAAA,QAGIC,YAHJ,GAIvBP,IAJuB,CAGIO,YAHJ;AAAA,QAKzBC,OALyB,GAKfF,WAAW,CAACG,IAAZ,IAAoBJ,MALL;AAAA,QAMzBK,YANyB,GAMT,IAAIC,IAAJ,CAASJ,YAAY,GAAC,IAAtB,CAAD,CAA8BK,WAA9B,EANU;AAAA,QAOzBC,KAPyB,GAOjBtB,eAAe,CAACW,IAAD,CAPE;;AAQ3B,WAAO;AACLG,MAAAA,MAAM,EAAEb,CAAC,CAACC,MADL;AAELqB,MAAAA,SAAS,EAAEzB,IAAI,EAFV;AAGLY,MAAAA,KAAK,EAAEA,KAHF;AAILc,MAAAA,WAAW,EAAEF,KAJR;AAKLG,MAAAA,OAAO,EAAEb,UALJ;AAMLc,MAAAA,MAAM,EAAET,OANH;AAOLU,MAAAA,WAAW,EAAER,YAPR;AAQLN,MAAAA,GAAG,EAAEA;AARA,KAAP;AAUD,GAlBM,CAAP;AAmBD,CAvBD;;AAyBA,IAAMe,oBAAoB,GAAG;AAC3BC,EAAAA,MAD2B,kBACpBzB,IADoB,EACd0B,MADc,EACP;AACZ,QAAEC,SAAF,GAAgBD,MAAhB,CAAEC,SAAF;AAAA,QACJC,QADI,GACO7B,WAAW,CAACC,IAAD,CADlB;;AAEN,WAAO;AACLU,MAAAA,MAAM,EAAEb,CAAC,CAACC,MADL;AAEL8B,MAAAA,QAAQ,EAAEA,QAFL;AAGLC,MAAAA,MAAM,EAAEF;AAHH,KAAP;AAKD;AAT0B,CAA7B;eAYeH,oB","sourcesContent":["import ut from '../utils/ut'\r\n\r\nconst { crId, replaceDecCodes } = ut;\r\n\r\nconst C = {\r\n  SOURCE: 'cryptocompare_news'\r\n};\r\n\r\nconst _toArticles = json => {\r\n  if (!json || !Array.isArray(json.Data)) {\r\n    return [];\r\n  }\r\n  return json.Data.map(item => {\r\n    const {\r\n      title, body, categories,\r\n      url, source, source_info={}, published_on\r\n    } = item\r\n    , _author = source_info.name || source\r\n    , _publishedAt = (new Date(published_on*1000)).toISOString()\r\n    , _body = replaceDecCodes(body);\r\n    return {\r\n      source: C.SOURCE,\r\n      articleId: crId(),\r\n      title: title,\r\n      description: _body,\r\n      related: categories,\r\n      author: _author,\r\n      publishedAt: _publishedAt,\r\n      url: url\r\n    };\r\n  })\r\n};\r\n\r\nconst CryptoCompareAdapter = {\r\n  toNews(json, option){\r\n    const { sortOrder } = option\r\n    , articles = _toArticles(json);\r\n    return {\r\n      source: C.SOURCE,\r\n      articles: articles,\r\n      sortBy: sortOrder\r\n    };\r\n  }\r\n};\r\n\r\nexport default CryptoCompareAdapter\r\n"],"file":"CryptoCompareAdapter.js"}