{"version":3,"sources":["../../../src/components/zhn-moleculs/ModalDialog.jsx"],"names":["CL","SHOWING","HIDING","STYLE","SHOW","display","HIDE","HIDE_POPUP","opacity","transform","ROOT_DIV","position","top","left","backgroundColor","border","borderRadius","boxShadow","zIndex","CAPTON_DIV","padding","color","textAlign","fontSize","COMMAND_DIV","cursor","float","marginTop","marginBottom","marginRight","ModalDialog","props","_handleKeyDown","event","focused","document","activeElement","rootDiv","onKeyDown","_renderCommandButton","divBtStyle","commandButtons","TS","styleButton","withoutClose","isClosePrimary","onClose","RAISED_ROOT","CL_RAISED_DIV","wasClosing","prevFocusedEl","focus","nextProps","nextState","isNotUpdate","prevProps","prevState","setTimeout","setState","timeout","isShow","stopPropagation","isWithButton","style","caption","styleCaption","children","_className","_style","n","_handleClickDialog","defaultProps","undefined"],"mappings":"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","file":"ModalDialog.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nimport BrowserCaption from '../zhn-atoms/BrowserCaption'\r\nimport RaisedButton from '../zhn-atoms/RaisedButton'\r\n\r\nconst CL = {\r\n  SHOWING : 'dialog show-popup',\r\n  HIDING : 'hide-popup'\r\n};\r\n\r\nconst STYLE = {\r\n  SHOW : {\r\n    display : 'block'\r\n  },\r\n  HIDE : {\r\n    display : 'none'\r\n  },\r\n  HIDE_POPUP : {\r\n    opacity: 0,\r\n    transform : 'scaleY(0)'\r\n  },\r\n  ROOT_DIV: {\r\n    position: 'absolute',\r\n    top: '20%',\r\n    left: '40%',\r\n    display: 'block',\r\n    backgroundColor: '#4D4D4D',\r\n    border: 'solid 2px #3f5178',\r\n    borderRadius: '5px',\r\n    boxShadow: 'rgba(0, 0, 0, 0.2) 0px 0px 0px 6px',\r\n    zIndex: 10\r\n  },\r\n  CAPTON_DIV:{\r\n    padding: '5px',\r\n    color: '#9e9e9e',\r\n    backgroundColor: '#3f5178',\r\n    textAlign: 'center',\r\n    fontSize: '18px'\r\n  },\r\n  COMMAND_DIV : {\r\n     cursor: 'default',\r\n     float: 'right',\r\n     marginTop: '16px',\r\n     marginBottom: '10px',\r\n     marginRight: '4px'\r\n  }\r\n};\r\n\r\nclass ModalDialog extends Component {\r\n  /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool,\r\n     isWithButton: PropTypes.bool,\r\n     isNotUpdate: PropTypes.bool,\r\n     withoutClose: PropTypes.bool,\r\n     commandButtons: PropTypes.arrayOf(PropTypes.element),\r\n     timeout: PropTypes.number,\r\n     caption: PropTypes.string,\r\n     style: PropTypes.object,\r\n     onClose: PropTypes.func\r\n   }\r\n   */\r\n   static defaultProps = {\r\n     isWithButton: true,\r\n     isNotUpdate: false,\r\n     timeout: 450,\r\n     styleButton: {\r\n       RAISED_ROOT: undefined,\r\n       CL_RAISED_DIV: undefined\r\n     }\r\n   }\r\n\r\n   constructor(props) {\r\n     super()\r\n     this.wasClosing = false\r\n   }\r\n   componentDidMount() {\r\n     this.prevFocusedEl = document.activeElement\r\n     this.rootDiv.focus()\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState) {\r\n     if (nextProps !== this.props){\r\n       if (nextProps.isNotUpdate){\r\n         return false;\r\n       }\r\n     }\r\n     return true;\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState){\r\n     if (this.wasClosing){\r\n       setTimeout(\r\n         () => { this.setState({}) },\r\n         this.props.timeout\r\n       )\r\n       if ( this.prevFocusedEl) {\r\n          this.prevFocusedEl.focus()\r\n       }\r\n     }\r\n     if (this.props.isShow && !prevProps.isShow) {\r\n       this.rootDiv.focus()\r\n     }\r\n   }\r\n\r\n  _handleClickDialog(event) {\r\n    event.stopPropagation()\r\n   }\r\n\r\n   _handleKeyDown = (event) => {\r\n     const focused = document.activeElement;\r\n      if (focused == this.rootDiv){\r\n        this.props.onKeyDown(event)\r\n      }\r\n   }\r\n\r\n  _renderCommandButton = () => {\r\n    const { divBtStyle, commandButtons, styleButton:TS, withoutClose, isClosePrimary=false, onClose } = this.props;\r\n    return (\r\n      <div style={{ ...STYLE.COMMAND_DIV, ...divBtStyle }}>\r\n        {commandButtons}\r\n        { !withoutClose &&\r\n            <RaisedButton\r\n               rootStyle={TS.RAISED_ROOT}\r\n               clDiv={TS.CL_RAISED_DIV}\r\n               caption=\"Close\"\r\n               isPrimary={isClosePrimary}\r\n               onClick={onClose}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            isShow, isWithButton,\r\n            style,\r\n            caption, styleCaption,\r\n            children, onClose\r\n          } = this.props;\r\n\r\n    let _className, _style;\r\n\r\n    if (this.wasClosing){\r\n      _style = STYLE.HIDE\r\n      this.wasClosing = false\r\n    } else {\r\n      _className = isShow ? CL.SHOWING : CL.HIDING\r\n      _style = isShow ? STYLE.SHOW : STYLE.HIDE_POPUP\r\n      if (!isShow){\r\n        this.wasClosing = true\r\n      }\r\n    }\r\n\r\n    return (\r\n         <div\r\n             ref={n => this.rootDiv = n}\r\n             tabIndex=\"0\"\r\n             className={_className}\r\n             style={{ ...STYLE.ROOT_DIV, ...style, ..._style}}\r\n             onClick={this._handleClickDialog}\r\n             onKeyDown={this._handleKeyDown}\r\n         >\r\n             <BrowserCaption\r\n               rootStyle={styleCaption}\r\n               caption={caption}\r\n               onClose={onClose}\r\n             />\r\n             <div>\r\n               {children}\r\n             </div>\r\n            {isWithButton && this._renderCommandButton()}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalDialog\r\n"]}