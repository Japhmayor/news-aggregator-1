{"version":3,"sources":["../../../src/components/zhn-m-input/TextField.jsx"],"names":["CL","SELECT","LABEL","DIV","INPUT","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","LABEL_ON_ERROR","color","LINE_ERROR","borderBottom","TextField","props","_handleFocusInput","isFocus","forceUpdate","_handleBlurInput","_handleInputChange","event","isOnTest","_isPassTest","onTest","target","value","setState","isPassTest","_handleKeyDown","keyCode","isOnEnter","onEnter","_value","initValue","state","rootStyle","caption","errorMsg","_labelStyle","undefined","_labelErrStyle","_lineStyle","String","trim"],"mappings":"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","file":"TextField.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#F44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #F44336'\r\n  }\r\n};\r\n\r\nclass TextField extends Component {\r\n  constructor(props){\r\n    super()\r\n    this.isFocus = false;\r\n    this.isOnTest = (typeof props.onTest === 'function') ? true : false\r\n    this.isOnEnter = (typeof props.onEnter === 'function') ? true : false\r\n    const _value = (props.initValue) ? props.initValue: '';\r\n    this.state = {\r\n      value: _value,\r\n      isPassTest: (this.isOnTest) ? props.onTest(_value) : true\r\n    }\r\n  }\r\n\r\n  _handleFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _handleBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _handleInputChange = (event) => {\r\n    if (this.isOnTest) {\r\n      const _isPassTest = this.props.onTest(event.target.value)\r\n      this.setState({\r\n        value : event.target.value,\r\n        isPassTest: _isPassTest\r\n      })\r\n    } else {\r\n      this.setState({ value : event.target.value })\r\n    }\r\n  }\r\n _handleKeyDown = (event) => {\r\n   if (event.keyCode === 27){\r\n     this.setState({ value: '' })\r\n   } else if (event.keyCode === 13 && this.isOnEnter) {\r\n     this.props.onEnter(event.target.value)\r\n   }\r\n }\r\n\r\n  render(){\r\n    const { rootStyle, caption, errorMsg='' } = this.props\r\n        , { value, isPassTest } = this.state\r\n        , _labelStyle = (value || this.isFocus)\r\n            ? undefined\r\n            : S.LABEL_TO_INPUT\r\n        , _labelErrStyle = (isPassTest)\r\n            ? undefined\r\n            : S.LABEL_ON_ERROR\r\n        , _lineStyle = (isPassTest)\r\n            ? undefined\r\n            : S.LINE_ERROR;\r\n\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={rootStyle}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{..._labelStyle, ..._labelErrStyle}}\r\n         >\r\n          {caption}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            type=\"text\"\r\n            className={CL.INPUT}\r\n            value={value}\r\n            autoComplete=\"new-text\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            spellCheck={false}\r\n            translate={false}\r\n            onFocus={this._handleFocusInput}\r\n            onBlur={this._handleBlurInput}\r\n            onChange={this._handleInputChange}\r\n            onKeyDown={this._handleKeyDown}\r\n          />\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          { _lineStyle && <div className={CL.INPUT_MSG_ERR}>{errorMsg}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getValue(){\r\n    return String(this.state.value).trim();\r\n  }\r\n}\r\n\r\nexport default TextField\r\n"]}