{"version":3,"sources":["../../../src/components/zhn-containers/ModalDialogContainer.jsx"],"names":["ModalDialogContainer","state","isShow","inits","shows","data","dialogs","currentDialog","_onStore","actionType","option","props","router","showAction","modalDialogType","type","setState","push","comp","_handleClose","_renderDialogs","store","map","dialog","createElement","key","onClose","bind","unsubscribe","listen"],"mappings":"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","file":"ModalDialogContainer.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nimport WrapperModalDialog from '../zhn-atoms/WrapperModalDialog';\r\n\r\nclass ModalDialogContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    })\r\n  }\r\n  */\r\n\r\n  state = {\r\n    isShow : false,\r\n    inits : {},\r\n    shows : {},\r\n    data : {},\r\n    dialogs : [],\r\n    currentDialog : null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.listen(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n  _onStore = (actionType, option) => {\r\n     const { router, showAction } = this.props;\r\n     if (actionType === showAction){\r\n       const type = option.modalDialogType\r\n           , { inits, shows, data, dialogs } = this.state;\r\n\r\n       data[type] = option;\r\n       shows[type] = true;\r\n       if (inits[type]){\r\n         this.setState({\r\n           isShow: true, currentDialog: type,\r\n           shows, data\r\n         })\r\n       } else {\r\n         dialogs.push({ type : type, comp : router[type] });\r\n         inits[type] = true\r\n         this.setState({\r\n           isShow: true, currentDialog: type,\r\n            shows, data, dialogs\r\n          });\r\n       }\r\n     }\r\n\r\n  }\r\n\r\n  _handleClose = (type) => {\r\n    this.state.shows[type] = false;\r\n    this.setState({\r\n      isShow: false,\r\n      currentDialog: null,\r\n      shows: this.state.shows\r\n    })\r\n  }\r\n\r\n  _renderDialogs = () => {\r\n    const { store } = this.props\r\n        , { shows, data, dialogs } = this.state;\r\n\r\n    return dialogs.map(dialog => {\r\n      const { type, comp } = dialog;\r\n      return React.createElement(comp, {\r\n           key: type,\r\n           isShow: shows[type],\r\n           data: data[type],\r\n           store : store,\r\n           onClose: this._handleClose.bind(null, type)})\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { isShow, currentDialog } = this.state;\r\n    return (\r\n      <WrapperModalDialog\r\n          isShow={isShow}\r\n          onClose={this._handleClose.bind(null, currentDialog)}\r\n      >\r\n         {this._renderDialogs()}\r\n     </WrapperModalDialog>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ModalDialogContainer\r\n"]}